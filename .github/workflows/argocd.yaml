name: ArgoCD

on:
  push:
    paths:
      - 'argocd/helm-flask/**'
      - 'argocd/log/**'
      - 'argocd/monitor-stack-argo/**'
      - 'app/**'
    branches:
      - main

env:
  IMAGE_NAME: crazyguy888/catexer-actions
  IMAGE_TAG: 0.0.${{ github.run_number }}

jobs:
  Build-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 3 # shallow clone - fetch last 3 commits specifically instead of last one only - for git diff

      - name: Debug GitHub SHA values # debug
        run: |
          echo "Previous commit (before push): ${{ github.event.before }}"
          echo "Latest commit (new push): ${{ github.sha }}"
      
      - name: Debug Modified Files using Git # debug
        run: |
          echo "Modified files between commits:"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }}
         

      - name: Check If App Dir Changed
        run: | # comparing files differences between 2 last commits to find line starting with "app/"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^app/"; then
            echo "app dir changed"
            echo "APP_MODIFIED=true" >> $GITHUB_ENV
          else
            echo "app dir not changed"
            echo "APP_MODIFIED=false" >> $GITHUB_ENV
          fi

      - name: APP CI - Login to Docker Hub # prepares the environment.
        if: env.APP_MODIFIED == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockeruser }} # github secrets
          password: ${{ secrets.dockertoken }} # github secrets
      
      - name: APP CI - Set Environment Variables # GITHUB_ENV - just to access them quicker in current job by name only.
        if: env.APP_MODIFIED == 'true'
        run: |
            echo "FLASK_ENV=${{ vars.FLASK_ENV }}" >> $GITHUB_ENV
            echo "MYSQL_HOST=${{ vars.MYSQL_HOST }}" >> $GITHUB_ENV
            echo "MYSQL_USER=${{ vars.MYSQL_USER }}" >> $GITHUB_ENV
            echo "MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }}" >> $GITHUB_ENV
            echo "PORT=${{ vars.PORT }}" >> $GITHUB_ENV
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
      
      - name: APP CI - Debug Environment Variables
        if: env.APP_MODIFIED == 'true'
        run: |
              echo "IMAGE_NAME=${IMAGE_NAME}"
              echo "IMAGE_TAG=${IMAGE_TAG}"

      - name: APP CI - Build Docker Compose Image # no cache anyway - removed --no-cache in build command.
        if: env.APP_MODIFIED == 'true'
        run: |
            docker compose -f app/docker-compose.yaml build
            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
  
      - name: APP CI - Push Docker Image # in the end: need to do push after tests. #####
        if: env.APP_MODIFIED == 'true'
        run: |
            docker images    
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${IMAGE_NAME}:latest

      - name: APP CI - Test - Running Project
        if: env.APP_MODIFIED == 'true'
        run: | # running without pulling nor building flask image because it is already built - docker compose reads the same image name by image context.
            ls
            docker images
            docker compose -f app/docker-compose.yaml up -d
            sleep 1
            docker compose -f app/docker-compose.yaml ps
      
      - name: APP CI - Run Tests # another tests in the future.
        if: env.APP_MODIFIED == 'true'
        run: |
            sleep 3
            docker compose -f app/docker-compose.yaml logs
            echo "port being tested: ${{ env.PORT }}"
            curl -f http://localhost:${{ env.PORT }}
            echo "tests passed.."

      - name: APP CI - Insert Image Tag to ArgoCD-Chart Values.yaml #######
        if: env.APP_MODIFIED == 'true'
        run: |
          echo "updating image tag in argocd/helm-flask/values.yaml file to ${IMAGE_TAG}"
          cd argocd/helm-flask
          sed -i "s/tag: .*/tag: ${IMAGE_TAG}/g" ./values.yaml

      - name: Update Helm-Flask Chart Version ######
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qi "helm-flask" \
           || [ "$APP_MODIFIED" = "true" ]; then
            cd argocd/helm-flask
            sed -i "s/version: .*/version: 0.0.${{ github.run_number }}/g" ./Chart.yaml
            echo "# this file was modified by a ci to update helm version tagging" >> ./Chart.yaml
          else
            echo "no need to update helm-flask chart version, app dir & flask chart not changed.."
          fi

      - name: Push Updated Charts to GitHub Argo-Repo ####### rsync tool already installed in github actions latest runners.
        env:
          HELM_REPO_PAT: ${{ secrets.HELM_REPO_PAT }}
        run: |
          set -x
          git clone https://${HELM_REPO_PAT}@github.com/OmriFialkov/ArgoCD-Charts.git argo
          cd argo/
          git config --global user.name "github-actions-app"
          git config --global user.email "github-actions@gmail.com"
          cd ..

          ls argocd/helm-flask
          git status

          rsync -avc --delete ./argocd/helm-flask/ ./argo/helm-flask/
          rsync -avc --delete ./argocd/log/ ./argo/log/
          rsync -avc --delete ./argocd/monitor-stack-argo/ ./argo/monitor-stack-argo/

          cd argo/
          git status
          git add -A
          git commit -m "Updated charts from github actions argo-flow"
          git push origin main
          echo "pushed updated charts to argocd repo"

  CD-argocd:
    runs-on: ubuntu-latest
    needs: "Build-Test"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false 

      - name: Configure AWS Credentials # for tf backend
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup google cloud service account credentials # env configuring for terraform commands.
        run: | 
          echo '${{ secrets.GCP_SA_KEY }}' | base64 --decode > /tmp/key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json" >> $GITHUB_ENV

      - name: Install gcloud CLI # for cli commands
        uses: google-github-actions/setup-gcloud@v1

      - name: login to gcloud # using service account as a credential to login to gcloud cli.
        run: |
          gcloud auth activate-service-account --key-file=/tmp/key.json
          
      - name: Terraform Init
        run: |
          cd google-k8s
          terraform init

      - name: Terraform Apply # update cluster infrastructure.
        run: |
          cd google-k8s
          terraform apply -auto-approve

      - name: install GKE google plugin # a must install google plugin to connect to gke cluster
        run: |
            gcloud components install gke-gcloud-auth-plugin
          
      - name: Set GKE Context to connect to cluster # runner is connecting to cluster.
        run: |
            gcloud container clusters get-credentials \
              ${{ secrets.GCP_CLUSTER_NAME }} \
              --project ${{ secrets.GCP_PROJECT_ID }} \
              --zone ${{ secrets.GCP_ZONE }}

      - name: Install Helm
        run: |
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            helm version

      - name: Install ArgoCD
        run: |
                helm repo add argo https://argoproj.github.io/argo-helm

                if helm status argocd -n argocd >/dev/null 2>&1; then
                  echo "ArgoCD is already installed in the argocd namespace."
                else
                  echo "ArgoCD is not installed. Proceeding with installation."
                  helm install argocd argo/argo-cd -n argocd \
                   --set server.service.type=LoadBalancer
                fi

      - name: Install Apps # app of apps
        run: |
          kubectl apply -f argocd/app-of-apps.yaml
          echo "run this command to get password to argocd login page:"
          echo "kubectl get secret argocd-initial-admin-secret -n argocd \
              -o jsonpath=\"{.data.password}\" | base64 -d"