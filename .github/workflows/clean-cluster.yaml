name: Clean Helm/ArgoCD Running Deployments

on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup google cloud service account credentials
        run: | 
          echo '${{ secrets.GCP_SA_KEY }}' | base64 --decode > /tmp/key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json" >> $GITHUB_ENV

      - name: Install gcloud CLI # for cli commands
        uses: google-github-actions/setup-gcloud@v1

      - name: login to gcloud # using service account as a credential to login to gcloud cli.
        run: |
          gcloud auth activate-service-account --key-file=/tmp/key.json

      - name: install GKE google plugin
        run: |
            gcloud components install gke-gcloud-auth-plugin
          
      - name: Set GKE Context to connect to cluster
        run: |
            gcloud container clusters get-credentials \
              ${{ secrets.GCP_CLUSTER_NAME }} \
              --project ${{ secrets.GCP_PROJECT_ID }} \
              --zone ${{ secrets.GCP_ZONE }}

      - name: Cleanup Helm / ArgoCD Deployments # in future do cascade delete with argocd cli to app-of-apps.
        run: |
          set -x  # enable debugging
          
          if helm list -A | grep -i "release\|loki\|my-monitoring"; then
            echo "Helm releases found. Cleaning up..."

            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            helm version

            cleanup_helm_release() {
              
              release=$1
              namespace=$2
              
              echo "Checking status of Helm release '$release' in namespace '$namespace'..."
              
              if helm status "$release" -n "$namespace"; then
                echo "Release '$release' found. Deleting..."
                helm uninstall "$release" -n "$namespace"
                echo "Successfully deleted Helm release '$release' in namespace '$namespace'."
              else
                echo "Helm release '$release' not found in namespace '$namespace'. Skipping."
              fi
            }

            cleanup_helm_release "release" "default"
            cleanup_helm_release "loki" "log"
            cleanup_helm_release "my-monitoring" "monitor"

          elif kubectl get application -n argocd | grep -i "flask-app\|monitor-stack\|loki"; then
            echo "ArgoCD applications found. Cleaning up..."

            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd

            pass=$(kubectl -n argocd get secret argocd-initial-admin-secret \
             -o jsonpath="{.data.password}" | base64 -d)
            service=$(kubectl get svc -n argocd | grep "argocd-server" | awk '{print $4}')   

            argocd login "$service" --username admin --password "$pass" --insecure
            argocd app delete ---

            argocd app list

          else
            echo "No Helm releases or ArgoCD applications found to clean up."
          fi


# helm upgrade --install argocd argo/argo-cd -n argocd --set server.service.type=LoadBalancer

# kubectl delete application app-of-apps -n argocd || true
# kubectl delete application flask-app -n argocd || true
# kubectl delete application monitor-stack -n argocd || true
# kubectl delete application loki -n argocd || true

# kubectl delete namespace monitor 
# kubectl delete namespace log
# kubectl create namespace log
# kubectl create namespace monitor

# kubectl delete clusterrolebinding loki-promtail || true
# kubectl delete clusterrole loki-promtail || true

# kubectl delete all --all
# kubectl delete configmap -l argocd.argoproj.io/instance=flask-app || true
# kubectl delete secret -l argocd.argoproj.io/instance=flask-app || true