name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub # prepares the environment. 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockeruser }} # github secrets
          password: ${{ secrets.dockertoken }} # github secrets
      
      - name: Set Environment Variables # GITHUB_ENV - just to access them quicker in current job by name only.
        run: |
            echo "IMAGE_NAME=crazyguy888/catexer-actions" >> $GITHUB_ENV
            echo "IMAGE_TAG=0.0.${{ github.run_number }}" >> $GITHUB_ENV
            echo "FLASK_ENV=${{ vars.FLASK_ENV }}" >> $GITHUB_ENV
            echo "MYSQL_HOST=${{ vars.MYSQL_HOST }}" >> $GITHUB_ENV
            echo "MYSQL_USER=${{ vars.MYSQL_USER }}" >> $GITHUB_ENV
            echo "MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }}" >> $GITHUB_ENV
            echo "PORT=${{ vars.PORT }}" >> $GITHUB_ENV
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
      
      - name: Debug Environment Variables
        run: |
              echo "IMAGE_NAME=${IMAGE_NAME}"
              echo "IMAGE_TAG=${IMAGE_TAG}"

      - name: Build Docker Compose Image
        run: |
            pwd
            ls
            docker compose build --no-cache
            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        env:
            IMAGE_NAME: ${{ env.IMAGE_NAME }}
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
  
      - name: Push Docker Image
        run: |
            docker images    
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${IMAGE_NAME}:latest

      - name: Test - Running Project
        run: | # running without pulling because it is already built.
            ls
            docker images
            docker compose up -d
            sleep 1
            docker compose ps
      
      - name: Run Tests
        run: |
            sleep 3
            docker compose logs
            echo "port being tested: ${{ env.PORT }}"
            curl -f http://localhost:${{ env.PORT }}

  deploy: # using terraform to deploy to aws ec2.
    runs-on: ubuntu-latest
    needs: build-Test # ensures that the build-test job has completed successfully.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init 

      - name: Configure AWS Credentials # can be used also without built action, but it is recommended.
        uses: aws-actions/configure-aws-credentials@v2 # with aws configure set commands.
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Apply
        env:
          TF_VAR_image_tag: "0.0.${{ github.run_number }}"
        run: terraform apply -auto-approve


  # disabled k8s deploy job temporarily for terraform testing with aws deploy.
  # deploy-k8s:
  #   runs-on: ubuntu-latest
  #   needs: test # ensures that the test job has completed successfully to proceed.
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: modify flask version in file flask-k8s.yaml
  #       run: |
  #           set -ex
  #           sed -i "s/latest/0.0.${{ github.run_number }}/g" ./k8s-config/flask-k8s.yaml
  #           cat ./k8s-config/flask-k8s.yaml

  #     - name: scp k8s yamls to vm
  #       env:
  #         SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  #         SSH_USER: ${{ secrets.SSH_USER }}
  #         REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  #       run: |
  #         set -ex
  #         sshpass -p $SSH_PASSWORD scp -v -o StrictHostKeyChecking=no \
  #          k8s-config/db-k8s.yaml \
  #          k8s-config/flask-k8s.yaml \
  #          k8s-config/vars-k8s.yaml \
  #          $SSH_USER@$REMOTE_HOST:/home/$SSH_USER/hey

  #     - name: ssh and apply YAMLs
  #       env:
  #         SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  #         SSH_USER: ${{ secrets.SSH_USER }}
  #         REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  #       run: |
  #         set -ex
  #         sshpass -p $SSH_PASSWORD ssh -v -o StrictHostKeyChecking=no \
  #          $SSH_USER@$REMOTE_HOST "cd /home/$SSH_USER/hey && kubectl apply -f ."