name: cd

on:
  workflow_run:
    workflows: ["helm ci"]
    types:
      - completed

jobs:
  deploy: # using helm cd here, 3/2/2025, google cloud k8s with terraform and helm.
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false 

      - name: Configure AWS Credentials # for s3 tf remote state - accessing s3 bucket.
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup google cloud service account credentials # env configuring for terraform commands.
        run: | 
          echo '${{ secrets.GCP_SA_KEY }}' | base64 --decode > /tmp/key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json" >> $GITHUB_ENV

      - name: Install gcloud CLI # for cli commands
        uses: google-github-actions/setup-gcloud@v1

      - name: login to gcloud # using service account as a credential to login to gcloud cli.
        run: |
          gcloud auth activate-service-account --key-file=/tmp/key.json

      - name: verify gcloud login # debug.
        run: |
          set -x
          gcloud auth list
          
      - name: Terraform Init
        run: |
          cd google-k8s
          terraform init

      - name: Terraform Apply # update cluster infrastructure.
        run: |
          cd google-k8s
          terraform apply -auto-approve

      - name: Install Helm
        run: |
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            helm version

      - name: Add and Update Helm Repository
        run: |
            echo "$GITHUB_WORKSPACE"
            helm repo add flaskrepo https://omrifialkov.github.io/helm-flaskgif
            helm repo update
            helm search repo flaskrepo --versions

      - name: install GKE google plugin # a must install google plugin to connect to gke cluster
        run: |
            gcloud components install gke-gcloud-auth-plugin

      - name: List GKE Clusters # debug.
        run: |
            gcloud container clusters list --project ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Set GKE Context to connect to cluster # runner is connecting to cluster.
        run: |
            gcloud container clusters get-credentials \
              ${{ secrets.GCP_CLUSTER_NAME }} \
              --project ${{ secrets.GCP_PROJECT_ID }} \
              --zone ${{ secrets.GCP_ZONE }}

      - name: Deploy Flask App Using Helm # Updating Release and App-Image (older with --set flag)
        run: |
          set -ex
          echo "IMAGE_TAG=${IMAGE_TAG}"
          helm upgrade --install release flaskrepo/helm-flask
          helm list

      - name: Verify Monitor Stack Is Up & Running # -q on grep is quiet mode, upgrade can be from values.yaml or published chart itself.
        run: | # helm list in the end to make sure whether upgrade took place or not - will go up a revision even if it did not actually upgraded something but the command succeeded, not urgent to upgrade this helm chart separately with triggers.
          set -x
          echo "checking if a conflicting kube-prometheus-stack release exists already in cluster by other release name and cannot be managed.."
          
          existing_release=$(helm list -A -o json | jq -r '.[] | select(.chart | startswith("kube-prometheus-stack")) | .name')
          
          if [[ -n "$existing_release" && "$existing_release" != "my-monitoring" ]]; then
            echo "monitor stack already running under release $existing_release, please rename manually to be managed by this workflow."
          
          elif [[ -n "$existing_release" && "$existing_release" == "my-monitoring" ]]; then
            echo "upgrading managed-existing monitor stack release.."
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            cd charts/monitor/
            helm upgrade my-monitoring prometheus-community/kube-prometheus-stack \
              -n monitor -f monitor-stack-values.yaml
            kubectl apply -f monitor-additional-resources.yaml

            helm list -n monitor
            if helm status my-monitoring -n monitor | grep -iq "deployed"; then
              echo "monitor stack upgrade successful"
            else
              echo "monitor stack upgrade may have failed"
              exit 1
            fi
              
          else
            echo "monitor stack release does not exist, installing under name my-monitoring.."
            cd charts/monitor/
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm install my-monitoring prometheus-community/kube-prometheus-stack \
              -n monitor -f monitor-stack-values.yaml
            kubectl apply -f monitor-additional-resources.yaml

            kubectl get pods -n monitor
            if helm status my-monitoring -n monitor | grep -iq "deployed"; then
              echo "monitor stack install successful"
            else
              echo "monitor stack install may have failed"
              exit 1
            fi

          fi
    

      - name: Verify Logging Stack Is Up & Running
        run: |
          set -x
          echo "checking if a conflicting loki-stack release exists already in cluster by other release name and cannot be managed.."

          existing_loki_release=$(helm list -A -o json | jq -r '.[] | select(.chart | startswith("loki-stack")) | .name')

          if [[ -n "$existing_loki_release" && "$existing_loki_release" != "loki" ]]; then
            echo "loki stack already running under release $existing_loki_release, please rename manually to be managed by this workflow."
          
          elif [[ -n "$existing_loki_release" && "$existing_loki_release" == "loki" ]]; then
            echo "upgrading managed-existing loki stack release.."
            helm repo add grafana https://grafana.github.io/helm-charts
            cd charts/log/
            helm upgrade loki grafana/loki-stack \
             -n log -f loki-values.yaml
            
            helm list -n log
            if helm status loki -n log | grep -iq "deployed"; then
              echo "loki upgrade successful"
            else
              echo "loki upgrade may have failed"
              exit 1
            fi

          else
            echo "loki stack release does not exist, installing under name loki.." 
            cd charts/log/ 
            helm repo add grafana https://grafana.github.io/helm-charts
            helm install loki grafana/loki-stack \
             -n log -f loki-values.yaml

            kubectl get pods -n log
            if helm status loki -n log | grep -iq "deployed"; then
              echo "loki install successful"
            else
              echo "loki install may have failed"
              exit 1
            fi
          fi

      - name: cleaning up docker hub older tags
        env:
          DOCKERTOKEN: ${{ secrets.DOCKERTOKEN }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
        run: |
          chmod +x ./docker-clean.sh
          ./docker-clean.sh